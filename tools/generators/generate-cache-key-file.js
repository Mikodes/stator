const fs = require("fs")
const path = require("path")
const capitalize = require("lodash/capitalize")
const camelCase = require("lodash/camelCase")
const kebabCase = require("lodash/kebabCase")

const folderNames = []
async function* walk(dir, ignoredPaths = []) {
  for await (const d of await fs.promises.opendir(dir)) {
    const entry = path.join(dir, d.name)
    if (d.isDirectory() && !ignoredPaths.includes(d.name)) {
      folderNames.push(entry)
      yield* walk(entry, ignoredPaths)
    } else if (d.isFile()) {
      yield entry
    }
  }
}

const generateCacheKeyFile = async () => {
  const endpointsPath = path.join(__dirname, "../../apps/webapp/src/redux/endpoints")
  const importStatements = []
  const cacheKeys = []
  let cacheFileContent = `/**
 * This file was automatically generated by tools/generators/generate-cache-file.js file
 */

IMPORT_STATEMENTS

`

  for await (const pathName of walk(endpointsPath)) {
    const isEndpointsFile = fs.lstatSync(pathName).isFile() && pathName.includes("-endpoints")
    if (isEndpointsFile) {
      const cacheKey = camelCase(path.basename(pathName, ".ts").replace("-endpoints", ""))
      cacheKeys.push(cacheKey)
      const endpointsSelectorRegex = /build => \(({[\s\S]+overrideExisting: false,\s+})/m
      const endpointsObjectString = fs.readFileSync(pathName, { encoding: "utf8" }).match(endpointsSelectorRegex)[1]
      const endpointSelectorRegex = /([a-z-A-Z]+): build.[qm]/gm
      const endpointNames = [...endpointsObjectString.matchAll(endpointSelectorRegex)].map(entries => [entries[1]]).flat()

      if (endpointNames.length > 0) {
        importStatements.push(`import { ${cacheKey}Api } from "./${kebabCase(cacheKey)}-endpoints"`)
        cacheFileContent += `export const add${capitalize(cacheKey)}CacheKeys = () =>
  ${cacheKey}Api.enhanceEndpoints({
    endpoints: {
${endpointNames
    .map(endpointName => {
      const tagPropertyKey = endpointName.includes("get") ? "providesTags" : "invalidatesTags"
      return `      ${endpointName}: { ${tagPropertyKey}: ["${cacheKey}"] },`
    })
    .join("\n")}
    },
  })\n`
      }
    }
  }

  cacheFileContent = cacheFileContent.replace("IMPORT_STATEMENTS", importStatements.map(importStatement => importStatement).join("\n"))
  cacheFileContent += `export const addGeneratedCacheKeys = () => {
  ${cacheKeys.map(cacheKey => `add${capitalize(cacheKey)}CacheKeys()`).join("\n")}
}\n`

  fs.writeFileSync(`${endpointsPath}/generated-cache-keys.ts`, cacheFileContent, { encoding: "utf8" })
  console.info(`Generated ${endpointsPath}/generated-cache-keys.ts`)
}

generateCacheKeyFile().catch(error => console.error(error))
